var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(n){const s=suggestions.classList.contains("d-none");if(s)return;const e=[...suggestions.querySelectorAll("a")];if(e.length===0)return;const t=e.indexOf(document.activeElement);if(n.key==="ArrowUp"){n.preventDefault();const s=t>0?t-1:0;e[s].focus()}else if(n.key==="ArrowDown"){n.preventDefault();const s=t+1<e.length?t+1:t;e[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/Help/docs/connect/",title:"Connect to CCB",description:"Connecting Doks.",content:""}).add({id:1,href:"/Help/docs/linux/",title:"Linux command line",description:"Linux Doks.",content:""}).add({id:2,href:"/Help/docs/slurm/",title:"Slurm",description:"Slurm Doks.",content:""}).add({id:3,href:"/Help/docs/conda/",title:"Conda",description:"Conda Doks.",content:""}).add({id:4,href:"/Help/docs/pipelines/",title:"Pipelines",description:"Pipelines Doks.",content:""}).add({id:5,href:"/Help/docs/help/",title:"Help",description:"Help Doks.",content:""}).add({id:6,href:"/Help/docs/connect/introduction/",title:"Introduction",description:"This page provides guidance on the use of this documentation.",content:"How to use this documentation # This documentation is organised as a chronological progression through the typical setup of new users of the MRC WIMM CCB services.\nWe encourage readers to follow instructions in this documentation in the order presented.\nðŸ‘‰  Following instructions out of order or skipping instructions may produce unexpected results.   Many parts of this documentation include screenshots for illustrative purposes. In those screenshots, user-specific directories and parameters are highlighted and blurred for clarity and privacy. Furthermore, it is very likely that you notice slight differences between those screenshots and your own experience, especially with respect to new versions of software packages becoming available.\nIf you notice any significant difference between this documentation and your own experience, please Contact us to resolve the issue and update the documentation where necessary.\nGo further # Experienced users and those revisiting this website to refresh their knowledge can use the navigation menu on the left to explore specific topics or use cheatsheets available on various topics.\nAn auto-completing search bar is also available at the top of the page to search the website by key words.\nContact us # Refer to the Help section for ways to contact us.\n"}).add({id:7,href:"/Help/docs/connect/apply/",title:"Apply for an account",description:"Use ",content:"Get started # Apply for an account on the CCB Account and Support â†’ page.\nðŸ‘‰  The MRC WIMM CCB services are available only to members of staff and eligible collaborators.   Full account # A full account gives access to all of our base resources, including free admission to all CCB introductory bioinformatics training courses.\n Weatherall Institute of Molecular Medicine (WIMM), Ludwig Institute of Cancer Research (LICR) and Department of Biochemistry pay a service charge to help fund the CCB and there are no additional charges. Other Departments - Accounts cost Â£1000 and are invoiced annually.  Apply for or renew your full CCB Account here â†’.\nImaging account # An imaging account gives access to the Harrier and Osprey servers for Huygens deconvolution analysis and GPU functionality. Please contact dominic.waithe@imm.ox.ac.uk for additional information.\nApply for or renew your Imaging Account here â†’.\nFunding your account # CCB accounts are subject to charging as a result of the costs associated with the necessary storage and computing facilities. Most funding bodies accept this as a justifiable cost and we encourage all users to include these charges in their grant requests.\n"}).add({id:8,href:"/Help/docs/connect/vpn-setup/",title:"VPN setup",description:"A VPN client may be necessary to use the CCB services while travelling or to work from home.",content:"Motivation # The CCB cluster is accessible only from the University campus network.\nWhen your device is not directly connected to the University campus network (e.g., when you are working from home or travelling), the VPN Service allows you to access the University campus network, and thus the CCB cluster.\nThe web page Virtual private network (VPN) â†’ provide the latest information about requirements and instructions to set up recommended VPN clients. Most of the sections below refer to instructions on that page.\nSet up a VPN client # On the web page Virtual private network (VPN) â†’, expand the section \u0026lsquo;Setup Cisco AnyConnect\u0026rsquo;.\nClick on the operating system for your device and follow the instructions.\nThe first time that you use the Cisco AnyConnect VPN client, the instructions will lead you to connect to the VPN using your username and password.\nSubsequently, your device may remember your username, but you will always be prompted for your password.\nThe Cisco AnyConnect VPN client # Once you have installed the Cisco AnyConnect VPN client and set up the University VPN profile during your first connection, the VPN client should display \u0026lsquo;University VPN\u0026rsquo; in the dropdown menu.\n  Connection # On the web page Virtual private network (VPN) â†’, expand the section \u0026lsquo;Connect using Cisco AnyConnect\u0026rsquo;.\nThe first time that you connect to the University VPN, you must type the University VPN address in the dropdown menu and click the button \u0026lsquo;Connect\u0026rsquo;.\nSubsequently, you can simply select \u0026lsquo;University VPN\u0026rsquo; in the dropdown menu and click the button \u0026lsquo;Connect\u0026rsquo;.\nThen, when prompted, type in your username and password. Then, click \u0026lsquo;OK\u0026rsquo;.\n  You are now connected to the University campus network, giving you access to the CCB cluster.\nDisconnection # On the web page Virtual private network (VPN) â†’, expand the section \u0026lsquo;Disconnect using Cisco AnyConnect\u0026rsquo;.\nYour device will use the University VPN service until you disconnect.\nWhile connected, you will see an icon in your computer\u0026rsquo;s system tray .\nClick on it to reveal the application\u0026rsquo;s menu.\n  In the menu, click \u0026lsquo;Disconnect\u0026rsquo;.\nYou are now disconnected from the University campus network and using only your own internet connection again.\nFurther reading # You can find useful informationÂ organised in various sections on the page Virtual private network (VPN) â†’.\nThe section \u0026lsquo;FAQ\u0026rsquo; details frequently asked questions and answers.\nThe section \u0026lsquo;Setup an alternate VPN client\u0026rsquo; details alternatives to the Cisco AnyConnect VPN client.\n"}).add({id:9,href:"/Help/docs/connect/ssh-first-connection/",title:"First SSH connection",description:"This page describes how to connect to the MRC WIMM CCB high-performance computing (HPC) cluster over SSH for the first time.",content:"Login nodes # The CCB cluster has three login nodes that users can log into:\n cbrglogin1.molbiol.ox.ac.uk cbrglogin2.molbiol.ox.ac.uk cbrglogin3.molbiol.ox.ac.uk  Log in with your username and password # When your account is created on the CCB cluster, you will be sent an email including your unique username on the CCB cluster and a randomly generated password.\nðŸ‘‰  You are encouraged to change your initial password on your first connection. More on that after we get you logged into the CCB cluster for the first time.   To log into a login node, open a Terminal on your personal computer and use the ssh command, combining your username, the @ symbol, and the name of the login node that you wish to log into. Conceptually, the command that you type in the Terminal should be structured as follows:\nssh \u0026lt;username\u0026gt;@\u0026lt;remote\u0026gt;  Replace \u0026lt;username\u0026gt; by your own username, and \u0026lt;remote\u0026gt; by one of the login nodes (see Login nodes section above). When you have typed the command above, press the Return key to execute it.\n  If this is indeed your very first connection, you may be prompted to verify the authenticity of the host. If this happens, type yes and press the Return key to continue connecting.\nWhen prompted for your password, type it and press the Return key.\nðŸ‘‰  For privacy and security reasons, the Terminal will not display your password as you type it. If you are having trouble typing your password correctly without seeing it, you can use a text editor to type it, then cut and paste it into the Terminal window when prompted.   You should now be logged in the MRC WIMM CCB high-performance computing (HPC) cluster.\nWelcome!\n"}).add({id:10,href:"/Help/docs/connect/ssh-change-password/",title:"Change your SSH password",description:"The randomly generated password that you received by email should be replaced by a new, secure, and memorable password.",content:"Motivation # The initial randomly generated password that you received by email is at risk of being stolen and misused if your email account were ever hacked. Separately, the randomness of the password makes it very difficult to remember and type from memory.\nIt is highly recommended to change that initial password on your first connection to the CCB cluster. To do so, in a Terminal logged in the CCB cluster, type the command passwd and press the Return key, as follows:\npasswd    When prompted, first type your current password (the randomly generated password that you were given in the email), and then type your new desired password twice, pressing the Return key after each password.\nðŸ‘‰  For privacy and security reasons, the Terminal will not display passwords as you type them. If you are having trouble typing your password correctly without seeing it, you can use a text editor to type it, then cut and paste it into the Terminal window when prompted.   You should then see a message indicating that your password was updated successfully.\n"}).add({id:11,href:"/Help/docs/connect/ssh-key-pair/",title:"Set up an SSH key pair",description:"SSH key pairs provide a more secure alternative to username and password for logging into remote systems.",content:"Motivation # An SSH key pair can be used as an additional layer of security to connect to your account on the CCB HPC cluster. Instead of typing your username and password, it is possible to log into your account on the CCB cluster using a pair of files; one file on your personal computer (the \u0026ldquo;private\u0026rdquo; key), one file on the CCB cluster (the \u0026ldquo;public\u0026rdquo; key). Together, those two files your personal computer and the cluster to identify themselves to each other.\n  Creating an SSH key pair # To create the SSH key pair, open a Terminal on your personal computer, and type:\nssh-keygen -t rsa -b 4096  The option -t rsa is important to generate the right type of SSH key pair. The option -b 4096 indicates the number of bits in the key; a minimum of 2048 is recommended, while larger values generally give additional strength to the key.\nWhen prompted for a filename, immediately press the Return key to accept the default filename and location.\nWhen prompted for a passphrase, we recommended typing a password that is secret yet memorable to you. This passphrase will be the last line of defense if anyone were to maliciously acquire your private SSH key file. Alternatively, you can press the Return key immediately without entering a passphrase, leaving your SSH key pair unprotected.\nðŸ‘‰  For privacy and security reasons, the Terminal will not display your passphrase as you type it.   When prompted to confirm your passphrase, type the same passphrase and press the Return key.\nFinally, the Terminal should display a message indicating that the key pair was successfully created.\n  ðŸ‘‰  You can ignore the key's randomart.   Adding the public key on the CCB cluster # Finally, the public key \u0026ndash; generated and saved as a file on your own computer \u0026ndash; needs to be copied to your account on the CCB cluster, so that the CCB cluster can prove its identity to the client (see Motivation section above).\nConceptually, the command that you type in the Terminal on your personal computer should be structured as follows:\nssh-copy-id \u0026lt;username\u0026gt;@\u0026lt;remote\u0026gt;  Replace \u0026lt;username\u0026gt; by your own username, and \u0026lt;remote\u0026gt; by one of the login nodes (see General information).\nIf the public key indeed does not exist on your CCB cluster account yet, you will be prompted for your password. Type it, and press the Return key. This adds the public key to the file ~/.ssh/authorized_keys on your account on the CCB cluster.\n  Configuring the SSH client # Having set up the SSH key pair on your own computer and the CCB cluster, you need to configure the SSH client so that it uses the private key whenever you invoke the ssh command, to prove your identity to the CCB cluster, and vice versa.\nOpen (or create) the file ~/.ssh/config on your personal computer. In that file, add the following lines:\nHost * IdentityFile ~/.ssh/id_rsa Port 22 Protocol 2 TCPKeepAlive yes ServerAliveInterval 300 ServerAliveCountMax 2 ForwardX11 yes ForwardX11Trusted yes ForwardAgent yes Compression yes XAuthLocation /opt/X11/bin/xauth # macOS only AddKeysToAgent yes UseKeychain yes  ðŸ‘‰  Do not include the lines after '# macOS only' if you are a Windows or Linux user.   Those lines configure parameters applied to any remote host that you log into using the ssh command.\n The keyword Host creates a new set of parameters. The pattern * matches all hostnames, making those parameters global defaults unless overwritten in subsequent declarations. The field IdentityFile specifies the path to the private SSH key file that you created earlier on your personal computer. The field Port specifies the port number to connect on the remote host. The field Protocol specifies the protocol version of SSH to use. The field TCPKeepAlive specifies whether TCP keepaline messages are regularly sent, which is useful to notice it the connection dies at any point. The field ServerAliveInterval sets a timeout interval in seconds after which the client will request a response from the server if no data has been received recently. The field ServerAliveCountMax sets the number of server alive messages which may be sent to the server without receiving any reply before ssh disconnects from the server. The field ForwardX11 specifies whether X11 connections will be automatically redirected over the secure channel of the ssh connection. The field ForwardX11Trusted specifies whether remote X11 clients are given full access to the original X11 display The field ForwardAgent specifies whether the connection to the authentication agent (if any) is forwarded to the remote machine. The field Compression specifies whether to use compression. The field XAuthLocation specifies the full pathname of the xauth program.  More information about fields that may be configured is available on the page ssh_config(5) - Linux man page â†’.\nMacOS-only fields:\n The field AddKeysToAgent specifies whether keys should be automatically added to a running ssh-agent. The field UseKeychain specifies whether passphrases are stored in the keychain.  More information about fields that may be configured for macOS is available on the page OpenBSD manual page server â†’.\nMore information on the field UseKeychain is available on the page Technical Note TN2449 â†’.\nLog in using your SSH key pair # You can now log into the CCB cluster using the same ssh command as before, without the need to type in your account password. However, if you have set a passphrase on your SSH key pair, you will be prompted to type this passphrase when the SSH key pair is used.\nssh \u0026lt;username\u0026gt;@\u0026lt;remote\u0026gt;  The screenshot below demonstrates the ssh command in action.\n  ðŸ‘‰  MacOS users may be prompted to type their optional passphrase only for the first connection. The macOS keychain is capable of remembering the passphrase and automatically using it for subsequent connections.   "}).add({id:12,href:"/Help/docs/connect/ssh-host/",title:"Configure an SSH host",description:"SSH hosts configures common parameters when connecting to certain remote hosts.",content:"Motivation # When regularly connecting to one or more remote hosts, it can be tedious to type or even remember all the parameters in the ssh command. Moreover some parameters remain the same for all remote hosts, while others are specific to each host.\nIn this section, we describe how to configure parameters that are specific to different hosts.\nRecommended parameters shared across all remote hosts are described in the earlier page Set up an SSH key pair.\nConfigure a remote host # On your personal computer, open the file ~/.ssh/config, replace \u0026lt;username\u0026gt; by your own username and add the following lines:\nHost ccb1 Hostname cbrglogin1.molbiol.ox.ac.uk User \u0026lt;username\u0026gt; Host ccb2 Hostname cbrglogin2.molbiol.ox.ac.uk User \u0026lt;username\u0026gt; Host ccb3 Hostname cbrglogin3.molbiol.ox.ac.uk User \u0026lt;username\u0026gt;  Then, save and close the file.\nThose lines configure three remote hosts.\n The keyword Host creates a new host. The field Hostname configures the real hostname to log into. The field User specifies the username to log in as. The indentation of fields is optional. However, four spaces are commonly used for readability.  More information about fields that may be configured is available on the page ssh_config(5) - Linux man page â†’.\nConnect to a configured remote host # You can now log into the CCB cluster using any of the following commands, to connect to the corresponding remote host:\nssh ccb1 ssh ccb2 ssh ccb3  Notice how you do not need to specify your username, the hostname, nor any of the parameters configured for all remote hosts.\nIn the screenshot below, notice the prompt changing. Initially, the ssh command is typed in the prompt of the personal computer. Once the connection is established, the prompt of the remote host appears (in this case, cbrglogin1).\n  "}).add({id:13,href:"/Help/docs/linux/commands/",title:"Bash commands",description:"A cheatsheet of built-in Bash commands.",content:"Motivation # Once logged into the CCB cluster, commands typed in a Terminal application are run in a Bash environment.\nBash is the shell, or command language interpreter, for the GNU operating system. The Bash interpreter includes a number of built-in commands that allow users to navigate and manage directories and files on the CCB cluster.\nIn this page, we provide a cheatsheet of the most commonly used commands along with a brief description of their purpose and advice on best practices.\npwd # The working directory is the directory relative to which commands typed in a Terminal are executed.\nThe pwd command prints the current working directory.\npwd  When you log into the CCB cluster, the working directory is initially set to the user\u0026rsquo;s home directory.\nls # Listing the contents of directories is essential to identify files that are available for use, as well as directories that can be navigated into.\nThe ls command prints the list of files in a given directory.\nAlone, the ls command prints the list of files in the working directory.\nls  Given the path to an existing directory, the ls command prints the list of files in that particular directory.\nðŸ‘‰  The directory path can be absolute or relative to the working directory.   ls / # absolute path (starts with '/') ls ~/.ssh # relative path (does not start with '/')  The ls command also accepts a number of options. Most commonly, the -l option is used to display detailed information about each file, including permissions, file size, and the timestamp of the latest update to each file.\nls -l  Often, the -h option is added to display file sizes in human-readable format, adding units (e.g., K - kilobyte, M - megabyte, G - gigabyte). Multiple options can be combined under the same - symbol. The two forms below are equivalent.\nls -lh ls -l -h  The -t option can be used in combination with the -l option to sort files by modification time (newest first).\nls -lt  The -a option can be used to reveal and include hidden files and directories.\nðŸ‘‰  Hidden files and directories have a name that start with the '.' symbol, e.g. '.ssh'.   ls -a  Finally \u0026ndash; to clarify \u0026ndash; options and paths can be combined, to list the contents of a particular directory with specific options.\nls -lh ~/.ssh  cd # Changing the working directory is often essential to run commands in the appropriate working directory.\nAlone, the cd command changes the working directory to the user\u0026rsquo;s home directory.\ncd  Given the path to an existing directory, the cd command changes the working directory to that directory.\nðŸ‘‰  The directory path can be absolute or relative to the current working directory.   cd / # absolute path (starts with '/') cd ~/.ssh # relative path (does not start with '/')  ðŸ‘‰  Use the 'ls' command to identify existing directories that you give to the 'cd' command.   The .. shorthand refers to the parent directory of each directory on the system. This can be used to move out of a directory. The shorthand can be combined multiple times in the same path to move out multiple levels at once. Some examples are given below.\ncd .. cd ../.. cd ../../another_directory  "}).add({id:14,href:"/Help/docs/linux/environment-variables/",title:"Bash environment variables",description:"Bash environment variables.",content:"Motivation # Once logged into the CCB cluster, a number of environment variables are set in the Bash session.\nSome environment variables are identical for all users on the cluster, other are derived from the username, and users can also set environment variables themselves. Many programs require certain environment variables to be set for their good functioning.\nIn this page, we describe some of the built-in environment variables, with a brief description of their purpose and advice on best practices.\n$HOME # The $HOME environment variable is set for each user to their own home directory.\nðŸ‘‰  The '~' symbol is equivalent to the '$HOME' environment variable.   The echo command can be used to display the value of $HOME.\necho $HOME  The $HOME environment variable can also be used in commands. For instance, users can list the contents of their home directory as follows.\nls $HOME  $USER # The $USER environment variable is set for each user to their own username.\nThe echo command can be used to display the value of $USER.\necho $USER  For instance, users create a directory named after their own username as follows. This is particularly useful to use a consistent naming of personal directories that is guaranteed to avoid any conflict with other usernames.\nmkdir $USER  "}).add({id:15,href:"/Help/docs/linux/bashrc/",title:"The .bashrc file",description:"Setting up the .bashrc file.",content:"Motivation # Every time you connect to the CCB cluster, you are given a new session in a Bash environment in your Terminal application.\nIn those new sessions, you may find yourself repetitively typing the same set of commands to set up the environment of that session before you are able to work.\nThe file ~/.bashrc is a Shell script that Bash runs whenever it is started interactively. As such, this file is often edited to include commands that users wish to execute every time they log in, without the need to explicitly type them every time.\nHowever, you want to be mindful of the commands that you add in this file, as the automatic execution of those commands may have unintended consequences on the running of other programs (e.g., remote desktop applications).\nNew accounts on the CCB cluster are created with a initial ~/.bashrc file. It is common for the file to evolve over time, as many programs suggest additions as part of their installation and setup procedures.\nIn this page, we provide an example that contains elements specific to the WIMM CCB cluster, as well as aliases and optional elements that may not be relevant to all users.\nContents # Please carefully read the comments and review the elements that are relevant to you. You may choose to replace the entire contents of your .bashrc file, or select portions of the example below.\n# .bashrc # Source global definitions if [ -f /etc/bashrc ]; then . /etc/bashrc fi # Non-interactive shells inherit the path and other variables # from the calling shell, so this setup is not needed. # prevents conda env being reset when calling P.run() if [[ $PS1 ]]; then # User specific aliases and functions alias emacs='emacs -nw' alias R='R --no-save' # Set umask for default file permissions umask 002 ### Load environment modules # Load the latest version of Git (system version is old) module load git/2.31.1 fi # if PS1  ðŸ‘‰  Carefully consider any difference between the contents below and the initial contents of the '.bashrc' file and whether you take responsibility for editing or deleting any of the original contents. This documentation may occasionally be out of date with respect to current best practices and the contents of the initial '.bashrc' file are carefully reviewed and updated by system administrators.   Explanation # Comments # First, it is important to clarify that, in the contents above, all the lines that start with the # symbol are purely comments that are only added for information purposes and future reference, without any impact on the functionality of the file.\nThe central bashrc file # With that said, the first chunk of code \u0026ndash; repeated below \u0026ndash; executes a script that sets up system-wide functions and aliases. That script is exclusively and safely managed by system administrators, and it is highly recommended to keep this as the first bit of code in your ~/.bashrc file at all times.\nif [ -f /etc/bashrc ]; then . /etc/bashrc fi  Interactive sessions # Next, an if statement is used to ensure that certain commands are only executed in interactive Bash session.\nFor instance, interactive session are those that are launched in your Terminal every time that you log into the CCB cluster, in contrast to non-interactive session that are launched when you submit jobs to the queue manager on the cluster (more on cluster jobs in a later section of this documentation).\nif [[ $PS1 ]]; then \u0026lt;... commands ...\u0026gt; fi  Aliases # Within that if block, the following chunk of code creates aliases, essentially shortcuts that condense arbitrarily complex (sequences of) commands accessible as single-word keywords.\nFirst, we change the meaning of the emacs command to automatically apply the option -nw. This force the Emacs editor to open within the terminal rather than attempting to open it as a GUI (i.e., windowed) application.\nThen, we change the meaning of the R command to automatically apply the option --no-save. This forces the R program to discard the workspace at the end of each session instead of offering to save the workspace to a file. Large workspaces \u0026ndash; that contain many objects or large data sets \u0026ndash; can significantly increase the time that it takes for R sessions to start and end (up to several minutes).\nalias emacs='emacs -nw' alias R='R --no-save'  File permissions # The following chunk of code controls the default permissions that are set on any file or directory that you create on the CCB cluster. The value of 002 sets the permissions to:\n read, write, and execute for you and your user group read and write for every other user  umask 002  ðŸ‘‰  The home directory and project directories that you are given access to have strict permissions. As such, other users do not have access to your home directory: they cannot see the list of files in your home directory nor their contents.   Modules # The following chunk of code uses the module command to put a version of the git program on the PATH that is more recent than the version originally installed with the operating system.\nmodule load git/2.31.1  "}).add({id:16,href:"/Help/docs/slurm/hpc-resources/",title:"HPC resources",description:"General information about the resources available through the Slurm workload management system on the CCB cluster.",content:"Introduction # The CCB cluster is a high-performance computing system shared by many users who run programs using a pool of computational resources to process data simultaneously.\nHowever, the resources that may be used at any point in time are limited by the total amount of resources available on the CCB cluster.\nTo ensure fair access to all users, the CCB cluster uses the Slurm workload manager. Users are required to submit their work as job scripts that describe the commands they wish to execute, and the amount of resources that they wish to grant to those commands during their execution. In turn, Slurm controls the execution of submitted jobs when sufficient resources are available, and manages a queue of pending work while waiting for sufficient resources to become available.\nResources # The table below summarises the types of compute nodes available.\n    Nodes Cores (per node) RAM (per node)     Large nodes 1 40 900GB   Batch nodes 20 24 240GB    ðŸ‘‰  In addition, the cluster contains 4 x NVIDIA Titan RTX cards for parallel and multi-core tasks such as deep learning.   The full list of compute nodes and associated information can be obtained as follows.\nsinfo --Node --long    More information about individual compute nodes can be obtained using commands detailed in the page Slurm commands.\n"}).add({id:17,href:"/Help/docs/slurm/commands/",title:"Slurm commands",description:"A cheatsheet of Slurm commands.",content:"Motivation # Once logged into the CCB cluster, a number of Slurm commands can be used to query resources available and the current workload.\nIn this page, we provide a cheatsheet of the most commonly used commands along with a brief description of their purpose and advice on best practices.\nPartitions # Summary information about partitions (i.e., individual job queues) can be accessed as follows.\nsinfo    The sinfo command displays the name of partitions in the first column, and additional information in a customisable set of additional columns. The full list of fields and their description can be found in the Slurm documentation â†’.\nIn the example above:\n The asterisk symbol * indicates the default partition, to which jobs are submitted when users don\u0026rsquo;t request a specific queue. The field AVAIL uses the value up to indicates partition that are accepting new jobs. The field TIMELIMIT indicates the maximum time limit allowed for jobs submitted to each partition (in the format hours:minutes:seconds). The value infinite is used to identify partitions without a job time limit. The field NODES indicates the number of nodes with each particular configuration in each partition. The field STATE indicates the state of nodes in each partition; for instance:  The value alloc indicates nodes allocated to one or more jobs. The value idle indicates nodes that are not allocated to any job. The value mixed indicates nodes where some CPUs are allocated a job while others are idle. The value drain indicates nodes that are currently executing jobs, but do not accept new jobs, per administrator request (e.g., for maintenance).    Nodes # The full list of individual nodes and associated information can be obtained as follows.\nsinfo --Node --long    In particular:\n The --Node option reports a separate line for each node in each partition (a node can be shared by multiple partitions). The --long option reports more detailed information.  More detailed information about the configuration of each individual nodes can be obtained as follows.\nscontrol show node  The full list of nodes above may be excessive. Information about a particular node can be obtained as follows.\nscontrol show node \u0026lt;nodename\u0026gt;  Replace \u0026lt;nodename\u0026gt; by the name of the particular node.\n"}).add({id:18,href:"/Help/docs/slurm/links/",title:"Links to Slurm documentation",description:"Links to external resources about Slurm.",content:" Slurm Documentation Slurm Quick Start User Guide WIMM CCB Computing Infrastructure  "}).add({id:19,href:"/Help/docs/conda/introduction/",title:"Introduction to Conda",description:"General information about the Conda package management system.",content:"Why use Conda? # The CCB cluster provides many bioinformatics software packages through the Environment Modules system, managed by system administrators.\nWhen software is not available through the module system, users may use the Conda package management system to install software packages themselves, and even organise distinct environments that may contain different version of those software package for different projects.\nAdditionally, when installing a package, Conda identifies and resolves package dependencies, installing the latest appropriate version of every dependency for the target package.\nGet started # In the following pages, we provide guidance to install and setup the Conda package management system for an individual user on the CCB cluster, we demonstrate how to install packages and create distinct environments, and how to activate environments before using the newly installed software packages on the command line.\n"}).add({id:20,href:"/Help/docs/conda/installation/",title:"Install Miniconda",description:"Installing the Conda package management system.",content:"Download the installer # In a new Terminal application, log into the CCB cluster.\nDownload the latest Miniconda installer for Linux using the following command.\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh  For reference, the URL to the installer file in the command above was obtained from the Latest Miniconda installer links.\nRun the installer # Use bash to execute the installer file as demonstrated below.\nbash Miniconda3-latest-Linux-x86_64.sh -b -p ~/conda  Note the use of options to control the behaviour of the installer:\n The option -b runs the installer in \u0026lsquo;batch\u0026rsquo; mode (without manual intervention). This assumes that you agree to the license agreement. It also prevents the installer from modifying your ~/.bashrc file. The option -p specifies the installation path, the location where Conda will be installed. We recommend specifying ~/conda, which will create a directory conda in your home directory.  ðŸ‘‰  Some of the instructions below rely on this specific installation path. If you decide to change it, be sure to adapt the following instructions accordingly.   Once the installation successfully completes, you may want to delete the installer file.\nrm Miniconda3-latest-Linux-x86_64.sh  Test the installation # Before going further, we recommend testing that the new installation of Conda works as expected.\nsource ~/conda/etc/profile.d/conda.sh conda activate base    First, the source command executes a script that makes Conda discoverable in the Bash environment of your Terminal application. This command is not expected to return any information in the Terminal.\nThen, the conda command is used to activate the base environment that was created during the installation process. Again, this command is not expected to return any information in the Terminal. However, after that command completes, the prefix (base) should be visible at the start of the prompt.\nThe which command can also be used to verify that the conda command is found on the PATH, at the expected location.\nwhich conda    Deactivate the environment # Before going further, we recommend deactivating the base environment.\nTo do so, the conda command is used with the deactivate sub-command.\nconda deactivate  ðŸ‘‰  Deactivating at this point will allow us to test a new shortcut that we set up in the next section.   Create a shortcut # Open your ~/.bashrc file and add the following lines.\n# Create an alias to activate the Conda base environment alias conda_activate_base='source ~/conda/etc/profile.d/conda.sh \u0026amp;\u0026amp; conda activate base'  Test the shortcut # Run the following lines of code sequentially.\nsource ~/.bashrc conda_activate_base    First, the source command is used to execute the commands in ~/.bashrc file, including the alias command that defines the new shortcut.\nThen, the newly defined alias is used to invoke the command that is now assigned to it. This shortcut should have the same effect as typing the full command defined in the alias, activating the base Conda environment and adding the (base) prefix to the prompt.\nNext steps # From this point, new instances of the Terminal application will automatically execute the ~/.bashrc file and define the alias as soon as you connect to the CCB cluster.\nAs a result, when you connect to the CCB cluster in new instances of the Terminal application, you will only need to call the alias by name.\nconda_activate_base    Furthermore, you should only call the alias once per Terminal application, as there is no benefit to activate the base environment multiple times per session.\nThe only exception being if you deactivate the base environment and wish to re-activate it. For instance, notice the (base) prefix appearing and disappearing from the promp as the environment is activated and de-activated in the example below:\nconda_activate_base conda deactivate conda_activate_base    "}).add({id:21,href:"/Help/docs/conda/first-steps/",title:"First steps with Conda",description:"Configuring Conda and installing mamba.",content:"Pre-requisite # Activate the base Conda environment, as demonstrated in the page Install Miniconda.\nHelp and information # The conda --help command can be used to list the main sub-commands of the conda executable, along with a brief description of their purpose.\nconda --help    The conda info command can be used to display information about your current installation.\nconda info    ðŸ‘‰  You should always include the output of the 'conda info' command with all your bug reports, as that information provides important context for your own situation.   Configuration # Conda packages are stored in different locations called channels. More information is available in the Conda documentation â†’.\nConfigured channels are searched in a specific order when installing packages, so it is important to configure which channels are searched and in which order.\nWe recommend the following channels, in decreasing order of priority:\n bioconda conda-forge default  In other words, Conda will attempt to install packages from the bioconda channel first, and then sequentially search the channels conda-forge and defaults when packages cannot be found in earlier channels in the priority list.\nAdding new channels automatically moves them to the top of the priority list. With that in mind, the commands below sequentially add channels from the lowest priority channel to the highest priority one, to produce the desired order of priority described above.\nconda config --add channels defaults conda config --add channels conda-forge conda config --add channels bioconda  The conda info command (described earier on this page) can be used to verify the list of channels that are currently configured, among other pieces of information.\n  List installed packages # The conda list command can be used to list the packages installed in the current environment.\nconda list    ðŸ‘‰  The screenshot above represents an example output reporting package version numbers at a certain point in time. It is very likely and entirely normal that your own package version numbers differ from those.   Update installed packages # The conda update command can be used to updates conda packages (in the current environment) to the latest compatible version.\nThe --all option checks all packages in the environment (rather than explicitly specifying individual packages).\nconda update --all  In particular, the command will produce a detailed plan, listing packages that may be downloaded and updated in the Conda environment.\nWe recommend careful reviewing the information detailed in the package update plan before agreeing to proceed, by typing y and pressing the Return key when prompted.\n  Update Conda itself # Part of the output of the conda update command may report whether a newer version of the conda package itself is available, alongside instructions to update that package.\n  Follow those instructions when you are ready to update your Conda installation.\nconda update -n base -c defaults conda  ðŸ‘‰  In the example above, the option '-c' is used to override the list of channels used during this particular command, ensuring that the 'conda' package is obtained safely and exclusively from the channel 'defaults'.   Search available packages # The conda search command can be used to search for packages available in any of the configured channels.\nFor instance, the example below demonstrates how to search for a Conda package called mamba. Note that the list of results was rather long and only the first results are shown in the screenshot.\nconda search mamba    The output of the conda search command includes key information for identifying the list of versions available and potentially selecting a specific build to install. For instance, the Channel column indicates the channel in which each package build is stored, which can be especially important for packages available from different channels.\nVerify that a package is not installed # The conda list \u0026lt;package\u0026gt; command can be used with the name of a specific package, to list any version of that package installed in the environment.\nThe output will be presented as a table, and the table will be empty (i.e., only column headers) if the package is not currently installed in the environment.\nconda list mamba    Alternatively, the Bash command which can be used to check whether an executable known to be present in a Conda package is detected on the PATH.\nwhich mamba    Install a package # The conda install command can be used to install packages.\nHowever, the built-in Conda installer can be quite slow to identify and resolve dependencies between packages, which led to a re-implementation of the conda package manager in C++, distributed in the mamba package.\nInstall the mamba package using the command below. Make sure to type y and press the Return key when prompted to proceed with the package plan.\nconda install mamba    Verify that a package is installed # In the example below, the conda list \u0026lt;package\u0026gt; command is used to list installed packages that contain the pattern mamba in their name.\nconda list mamba    In the example below, the Bash command which is used to display the location of the executable mamba that is now detected on the PATH.\nwhich mamba    Alternatively, the mamba executable itself can be invoked, for instance with the --help option, to display the help page of the program, implictly verifying that the executable itself is installed and working properly.\nmamba --help    Using Mamba # Mamba is implemented as a drop-in replacement for Conda.\nIn other words, the mamba executable can be used in many cases as a replacement for the conda executable, to produce the same result much more rapidly.\nFor instances:\nmamba info mamba update --all mamba search \u0026lt;package\u0026gt; mamba install \u0026lt;package\u0026gt;  Replace \u0026lt;package\u0026gt; by the actual name of any package of interest to you.\n"}).add({id:22,href:"/Help/docs/conda/cheatsheet/",title:"Conda cheatsheet",description:"A cheatsheet of Conda commands.",content:"Search available packages # The search command can be used to search for available packages and package versions programmatically.\nFor instance:\nmamba search pysam  The following websites can also be used to manually search packages available in individual channels:\n bioconda: https://anaconda.org/bioconda/repo/ conda-forge: https://conda-forge.org/feedstock-outputs/index.html  Install a specific package version # To install a specific version of a package, add the = symbol, followed by the specific version number.\nFor instance:\nmamba install pysam=0.19.1  Reminder: use the search command to identify the the list of versions available for a given package.\nmamba search pysam  ðŸ‘‰  The search returns package versions in alphanumeric order, meaning that the most recent versions will be present at the end of the output.   Dry-run # For several commands, the --dry-run option can be used to only display what would have been done, without actually doing anything. This can be particularly helpful to safely assess the impact of any command that is likely to significantly alter the environment.\nFor instance:\nmamba install pysam --dry-run  Remove packages # The remove command can be used to remove installed packages from the environment.\nFor instance:\nmamba remove samtools  "}).add({id:23,href:"/Help/docs/conda/links/",title:"Links to Conda documentation",description:"Links to external resources about Conda.",content:" Conda documentation website Conda documentation Miniconda documentation  "}).add({id:24,href:"/Help/docs/pipelines/drmaa/",title:"The DRMAA API",description:"Setting up the DRMAA API.",content:"Motivation # The Distributed Resource Management Application API (DRMAA) â†’ is used by workflow managers such as cgatcore â†’ to communicate with HPC queue managers while submitting and monitoring jobs.\nThe drmaa package provides a Python interface to the DRMAA library.\nThis page describes the setup necessary for using DRMAA on the CCB cluster. This setup is a prerequisite for using cgatcore â†’ pipelines.\nSetup # On the CCB cluster, in your ~/.bashrc file, add the following chunk of code to set the environment variable DRMAA_LIBRARY_PATH.\nðŸ‘‰  If your '.bashrc' file already contains the conditional statement 'if [[ $PS1 ]]', you can add only the 'export' statement within the existing bloc of code.   if [[ $PS1 ]]; then export DRMAA_LIBRARY_PATH=/usr/lib64/libdrmaa.so fi  You are now ready to use the DRMAA library in cgatcore â†’ pipelines.\n"}).add({id:25,href:"/Help/docs/pipelines/cgatcore/",title:"The cgatcore library",description:"Using cgatcore pipelines.",content:"Motivation # CGAT-core is a workflow management system that allows users to build data analysis pipelines.\nThe cgatcore python package provides a set of libraries and helper functions that enable researchers to design and build computational workflows for large-scale data analysis workflows.\nIn-depth documentation about cgatcore is available on ReadTheDocs â†’.\nIn this page, we provide advice for setting up the cgatcore workflow management system on the WIMM CCB cluster.\nSetup # On the CCB cluster, create the file ~/.cgat.yml and add the following lines in it.\ncluster: queue_manager: slurm queue: batch tmpdir: /tmp  First, the section cluster defines the program acting as queue manager and the name of the queue to which jobs will be submitted using the DRMAA library.\nThe field tmpdir defines the temporary directory used by cgatcore for writing temporary files during the execution of workflows.\n"}).add({id:26,href:"/Help/docs/help/contact/",title:"Contact",description:"Contacts for getting help.",content:"Email # For issues with the MRC WIMM CCB HPC cluster, email genmail@molbiol.ox.ac.uk to open a ticket that will be tracked by the system administrators.\nGitHub # For issues with this documentation, open a GitHub issue â†’.\n"}).add({id:27,href:"/Help/docs/help/links/",title:"Links to external resources",description:"Links to external resources for further reading are gathered here.",content:"University of Oxford #  MRC Weatherall Institute of Molecular Medicine MRC WIMM Centre for Computational Biology IT Help  "}).add({id:28,href:"/Help/docs/help/contributing/",title:"Contributing",description:"How to contribute to this documentation.",content:"Contributing # Contribute to this documentation on GitHub â†’.\n"}).add({id:29,href:"/Help/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()