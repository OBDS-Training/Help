var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(n){const s=suggestions.classList.contains("d-none");if(s)return;const e=[...suggestions.querySelectorAll("a")];if(e.length===0)return;const t=e.indexOf(document.activeElement);if(n.key==="ArrowUp"){n.preventDefault();const s=t>0?t-1:0;e[s].focus()}else if(n.key==="ArrowDown"){n.preventDefault();const s=t+1<e.length?t+1:t;e[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/Help/docs/prologue/",title:"Prologue",description:"Prologue Doks.",content:""}).add({id:1,href:"/Help/docs/vpn/",title:"VPN",description:"VPN Doks.",content:""}).add({id:2,href:"/Help/docs/ssh/",title:"SSH",description:"SSH Doks.",content:""}).add({id:3,href:"/Help/docs/bash/",title:"Bash",description:"Bash Doks.",content:""}).add({id:4,href:"/Help/docs/slurm/",title:"Slurm",description:"Slurm Doks.",content:""}).add({id:5,href:"/Help/docs/conda/",title:"Conda",description:"Conda Doks.",content:""}).add({id:6,href:"/Help/docs/pipelines/",title:"Pipelines",description:"Pipelines Doks.",content:""}).add({id:7,href:"/Help/docs/help/",title:"Help",description:"Help Doks.",content:""}).add({id:8,href:"/Help/docs/prologue/introduction/",title:"Introduction",description:"The MRC WIMM Center for Computational Biology provides High-Performance Computing services to biomedical researchers at the University of Oxford.",content:"How to use this documentation # This documentation is organised as a chronological progression through the typical setup of new users of the MRC WIMM CCB services.\nWe encourage readers to follow instructions in this documentation in the order presented.\nFollowing instructions out of order or skipping instructions is likely to produce unexpected results.\nGet started # ðŸ‘‰  The MRC WIMM CCB services are available to members of staff and close collaborators.   Apply for an account on the CCB Account and Support â†’ page.\nGo further # Explore specific topics documented in the sections of the navigation menu on the left, or use the auto-completing search bar above to search by keyword.\nContributing # Contribute to this documentation on GitHub â†’.\nHelp # Contacts for help. Help\n"}).add({id:9,href:"/Help/docs/vpn/setup/",title:"VPN | Setup",description:"Setting up the VPN client.",content:"Motivation # The CCB cluster is accessible only from the University campus network.\nWhen your device is not directly connected to the University campus network (e.g., when you are working from home or travelling), the VPN Service allows you to access the University campus network, and thus the CCB cluster.\nThe web page Virtual private network (VPN) â†’ provide the latest information about requirements and instructions to set up recommended VPN clients. Most of the sections below refer to instructions on that page.\nSet up a VPN client # On the web page Virtual private network (VPN) â†’, expand the section \u0026lsquo;Setup Cisco AnyConnect\u0026rsquo;.\nClick on the operating system for your device and follow the instructions.\nThe first time that you use the Cisco AnyConnect VPN client, the instructions will lead you to connect to the VPN using your username and password.\nSubsequently, your device may remember your username, but you will always be prompted for your password.\nThe Cisco AnyConnect VPN client # Once you have installed the Cisco AnyConnect VPN client and set up the University VPN profile during your first connection, the VPN client should display \u0026lsquo;University VPN\u0026rsquo; in the dropdown menu.\n  Cisco AnyConnect VPN client.\nConnection # On the web page Virtual private network (VPN) â†’, expand the section \u0026lsquo;Connect using Cisco AnyConnect\u0026rsquo;.\nThe first time that you connect to the University VPN, you must type the University VPN address in the dropdown menu and click the button \u0026lsquo;Connect\u0026rsquo;.\nSubsequently, you can simply select \u0026lsquo;University VPN\u0026rsquo; in the dropdown menu and click the button \u0026lsquo;Connect\u0026rsquo;.\nThen, when prompted, type in your username and password. Then, click \u0026lsquo;OK\u0026rsquo;.\n  Connect using Cisco AnyConnect VPN client.\nYou are now connected to the University campus network, giving you access to the CCB cluster.\nDisconnection # On the web page Virtual private network (VPN) â†’, expand the section \u0026lsquo;Disconnect using Cisco AnyConnect\u0026rsquo;.\nYour device will use the University VPN service until you disconnect.\nWhile connected, you will see an icon in your computer\u0026rsquo;s system tray .\nClick on it to reveal the application\u0026rsquo;s menu.\n  Cisco AnyConnect menu while connected.\nIn the menu, click \u0026lsquo;Disconnect\u0026rsquo;.\nYou are now disconnected from the University campus network and using only your own internet connection again.\nFurther reading # On the web page Virtual private network (VPN) â†’, you can find useful information organised in various sections.\nThe section \u0026lsquo;FAQ\u0026rsquo; details frequently asked questions and answers.\nThe section \u0026lsquo;Setup an alternate VPN client\u0026rsquo; details alternatives to the Cisco AnyConnect VPN client.\n"}).add({id:10,href:"/Help/docs/ssh/general-information/",title:"SSH | General information",description:"General information about the MRC WIMM CCB high-performance computing (HPC) cluster.",content:"Login nodes # The CCB cluster has three login nodes that users can log into:\n cbrglogin1.molbiol.ox.ac.uk cbrglogin2.molbiol.ox.ac.uk cbrglogin3.molbiol.ox.ac.uk  Compute nodes # The CCB cluster includes a number of compute nodes where the majority of computations are run.\nCompute nodes cannot be logged into directly. Users are expected to interact with compute nodes through the Slurm workload manager.\nðŸ‘‰  Users may log into compute nodes from any login node for debugging purposes.   "}).add({id:11,href:"/Help/docs/ssh/first-connection/",title:"First SSH connection",description:"Connecting to the MRC WIMM CCB high-performance computing (HPC) cluster for the first time.",content:"Log in with your username and password # When your account is created on the CCB cluster, you will be sent an email including your unique username on the CCB cluster and a randomly generated password.\nðŸ‘‰  You are encouraged to change your initial password on your first connection. More on that after we get you logged into the CCB cluster for the first time.   To log into a login node, open a Terminal on your personal computer and use the ssh command, combining your username, the @ symbol, and the name of the login node that you wish to log into. Conceptually, the command that you type in the Terminal should be structured as follows:\nssh \u0026lt;username\u0026gt;@\u0026lt;remote\u0026gt;  Replace \u0026lt;username\u0026gt; by your own username, and \u0026lt;remote\u0026gt; by one of the login nodes (see General information). When you have typed the command above, press the Return key to execute it.\n  Using the `ssh` command.\nIf this is indeed your very first connection, you may be prompted to verify the authenticity of the host. If this happens, type yes and press the Return key to continue connecting.\nWhen prompted for your password, type it and press the Return key.\nðŸ‘‰  For privacy and security reasons, the Terminal will not display your password as you type it. If you are having trouble typing your password correctly without seeing it, you can use a text editor to type it, then cut and paste it into the Terminal window when prompted.   You should now be logged in the MRC WIMM CCB high-performance computing (HPC) cluster. Welcome!\n"}).add({id:12,href:"/Help/docs/ssh/change-password/",title:"Change your SSH password",description:"The randomly generated password that you received by email should be replaced by a new secure and memorable password.",content:"Motivation # The initial randomly generated password that you received by email is at risk of being stolen and misused if your email account were ever hacked. Separately, the randomness of the password makes it very difficult to remember and type from memory.\nIt is highly recommended to change that initial password on your first connection to the CCB cluster. To do so, in a Terminal logged in the CCB cluster, type the command passwd and press the Return key, as follows:\npasswd    Changing your password.\nWhen prompted, first type your current password (the randomly generated password that you were given in the email), and then type your new desired password twice, pressing the Return key after each password.\nðŸ‘‰  For privacy and security reasons, the Terminal will not display passwords as you type them. If you are having trouble typing your password correctly without seeing it, you can use a text editor to type it, then cut and paste it into the Terminal window when prompted.   You should then see a message indicating that your password was updated successfully.\n"}).add({id:13,href:"/Help/docs/ssh/ssh-key-pair/",title:"Set up an SSH key pair",description:"SSH key pairs provide a more secure alternative to username and password for logging into remote systems.",content:"Motivation # An SSH key pair can be used as an additional layer of security to connect to your account on the CCB HPC cluster. Instead of typing your username and password, it is possible to log into your account on the CCB cluster using a pair of files; one file on your personal computer (the \u0026ldquo;private\u0026rdquo; key), one file on the CCB cluster (the \u0026ldquo;public\u0026rdquo; key). Together, those two files identify your personal computer and the cluster to each other.\n  The concept of SSH key pair.\nCreating an SSH key pair # To create the SSH key pair, open a Terminal on your personal computer, and type:\nssh-keygen -t rsa -b 4096  The option -t rsa is important to generate the right type of SSH key pair. The -b 4096 option indicates the number of bits in the key; a minimum of 2048 is recommended, while larger values generally provide additional strength to the key.\n  Generating an SSH key pair.\nWhen prompted for a filename, immediately press the Return key to accept the default filename and location.\nWhen prompted for a passphrase, it is recommended to type a password that is secret yet memorable to you, as this will be the last line of defense if anyone maliciously acquired your private SSH key file. Alternatively, you can press the Return key immediately without entering a passphrase, leaving your SSH key pair unprotected.\nðŸ‘‰  For privacy and security reasons, the Terminal will not display your passphrase as you type it.   When prompted to confirm your passphrase, type the same answer as you just did and press the Return key.\nFinally, the Terminal should display a message indicating that the key pair was successfully created.\nAdding the public key on the CCB cluster # Finally, the public key needs to be copied to your account on the CCB cluster, so that the CCB cluster can prove its identity to the client.\nConceptually, the command that you type in the Terminal on your personal computer should be structured as follows:\nssh-copy-id \u0026lt;username\u0026gt;@\u0026lt;remote\u0026gt;  Replace \u0026lt;username\u0026gt; by your own username, and \u0026lt;remote\u0026gt; by one of the login nodes (see General information).\nIf the public key indeed does not exist on your CCB cluster account yet, you will be prompted for your password. Type it, and press the Return key. This adds the public key to the file ~/.ssh/authorized_keys on your account on the CCB cluster.\n  Copying the public SSH key to the CCB cluster.\nConfiguring the SSH client # Having generated the SSH key pair, you need to configure the SSH client so that it uses the private key when the ssh command is invoked, to prove its identity to the CCB cluster.\nOpen - or create - the file ~/.ssh/config on your personal computer. In that file, add the following lines:\nHost * IdentityFile ~/.ssh/id_rsa Port 22 Protocol 2 TCPKeepAlive yes ServerAliveInterval 300 ServerAliveCountMax 2 ForwardX11 yes ForwardX11Trusted yes ForwardAgent yes Compression yes XAuthLocation /opt/X11/bin/xauth # macOS only AddKeysToAgent yes UseKeychain yes  ðŸ‘‰  Do not include the lines after '# macOS only' if you are a Windows or Linux user.   Those lines configure parameters applied to any remote host that you log into using the ssh command.\n The keyword Host creates a new set of parameters. The pattern * matches all hostnames, making those parameters global defaults unless overwritten in subsequent declarations. The field IdentityFile specifies the path to the private SSH key file that you created earlier on your personal computer. The field Port specifies the port number to connect on the remote host. The field Protocol specifies the protocol version of SSH to use. The field TCPKeepAlive specifies whether TCP keepaline messages are regularly sent, which is useful to notice it the connection dies at any point. The field ServerAliveInterval sets a timeout interval in seconds after which the client will request a response from the server if no data has been received recently. The field ServerAliveCountMax sets the number of server alive messages which may be sent to the server without receiving any reply before ssh disconnects from the server. The field ForwardX11 specifies whether X11 connections will be automatically redirected over the secure channel of the ssh connection. The field ForwardX11Trusted specifies whether remote X11 clients are given full access to the original X11 display The field ForwardAgent specifies whether the connection to the authentication agent (if any) is forwarded to the remote machine. The field Compression specifies whether to use compression. The field XAuthLocation specifies the full pathname of the xauth program.  More information about fields that may be configured is available on the page ssh_config(5) - Linux man page â†’.\nMacOS-only fields:\n The field AddKeysToAgent specifies whether keys should be automatically added to a running ssh-agent. The field UseKeychain specifies whether passphrases are stored in the keychain.  More information about fields that may be configured for macOS is available on the page OpenBSD manual page server â†’.\nMore information on the field UseKeychain is available on the page Technical Note TN2449 â†’.\nLog in with your SSH key pair # You can now log into the CCB cluster using the same ssh command as before, without the need to type in your account password. However, if you have set a passphrase on your SSH key pair, you will be prompted to type this passphrase when the SSH key pair is used.\nssh \u0026lt;username\u0026gt;@\u0026lt;remote\u0026gt;  The screenshot below demonstrates the ssh command in action.\n  Connecting using the SSH key pair.\n"}).add({id:14,href:"/Help/docs/ssh/ssh-host/",title:"Configure an SSH host",description:"SSH hosts configures common parameters when connecting to certain hosts.",content:"Motivation # When regularly connecting to one or more remote hosts, it can be tedious to type or even remember all the parameters in the ssh command. Moreover some parameters remain the same for all remote hosts, while others are specific to each host.\nIn this section, we describe how to configure parameters that are specific to different hosts.\nRecommended parameters shared across all remote hosts are described in the earlier page Set up an SSH key pair.\nConfigure a remote host # On your personal computer, open the file ~/.ssh/config, replace \u0026lt;username\u0026gt; by your own username and add the following lines:\nHost ccb1 Hostname cbrglogin1.molbiol.ox.ac.uk User \u0026lt;username\u0026gt; Host ccb2 Hostname cbrglogin2.molbiol.ox.ac.uk User albrecht Host ccb3 Hostname cbrglogin3.molbiol.ox.ac.uk User albrecht  Then, save and close the file.\nThose lines configure three remote hosts.\n The keyword Host creates a new host. The field Hostname configures the real hostname to log into. The field User specifies the username to log in as. The indentation of fields is optional. However, four spaces are commonly used for readability.  More information about fields that may be configured is available on the page ssh_config(5) - Linux man page â†’.\nConnect to a configured remote host # You can now log into the CCB cluster using any of the following commands, to connect to the corresponding remote host:\nssh ccb1 ssh ccb2 ssh ccb3  Notice how you do not need to specify your username, the hostname, nor any of the parameters configured for all remote hosts.\nIn the screenshot below, notice the prompt changing. Initially, the ssh command is typed in the prompt of the personal computer. Once the connection is established, the prompt of the remote host appears (in this case, cbrglogin1).\n  Connecting to a configured SSH host.\n"}).add({id:15,href:"/Help/docs/bash/bashrc/",title:"The .bashrc file",description:"Setting up the .bashrc file.",content:"Motivation # Every time you connect to the CCB cluster, you are given a new session in a Bash environment in your Terminal application.\nIn those new sessions, you may find yourself repetitively typing the same set of commands to set up the environment of that session before you are able to work.\nThe file ~/.bashrc is a Shell script that Bash runs whenever it is started interactively. As such, this file is often edited to include commands that users wish to execute every time they log in, without the need to explicitly type them every time.\nHowever, you want to be mindful of the commands that you add in this file, as the automatic execution of those commands may have unintended consequences on the running of other programs (e.g., remote desktop applications).\nNew accounts on the CCB cluster are created with a initial ~/.bashrc file. It is common for the file to evolve over time, as many programs suggest additions as part of their installation and setup procedures.\nIn this page, we provide an example that contains elements specific to the WIMM CCB cluster, as well as aliases and optional elements that may not be relevant to all users.\nContents # Please carefully read the comments and review the elements that are relevant to you. You may choose to replace the entire contents of your .bashrc file, or select portions of the example below.\nðŸ‘‰  Carefully consider any difference between the contents below and the initial contents of the '.bashrc' file and whether you take responsibility for deleting any of the initial contents. This documentation may occasionally be out of date and the contents of the initial '.bashrc' file are carefully reviewed by system administrators.   # .bashrc # Source global definitions if [ -f /etc/bashrc ]; then . /etc/bashrc fi # Non-interactive shells inherit the path and other variables # from the calling shell, so this setup is not needed. # prevents conda env being reset when calling P.run() if [[ $PS1 ]]; then # User specific aliases and functions alias emacs='emacs -nw' alias R='R --no-save' # Set umask for default file permissions umask 002 ### Load environment modules # Load the latest version of Git (system version is old) module load git/2.31.1 fi # if PS1  Description # First, it is important to clarify that all the lines that start with the # symbol are comments that are only added for information purposes and future reference, without any impact on the functionality of the file.\nNext, the following chunk of code executes a central script that sets up system-wide functions and aliases. It is highly recommended to keep this as the first bit of code in your .bashrc at all times.\nif [ -f /etc/bashrc ]; then . /etc/bashrc fi  Next, an if statement is used to ensure that certain commands are only executed in interactive Bash session.\nFor instance, interactive session are those that are launched in your Terminal every time you log into the CCB cluster, while non-interactive session are those that are launched when you submit jobs to the queue manager on the cluster.\nif [[ $PS1 ]]; then \u0026lt;... commands ...\u0026gt; fi  Next the following chunk of code creates aliases, essentially shortcuts that summarise arbitrary commands into single-word commands.\nFirst, we change the meaning of the emacs command to automatically apply the option -nw. This force the Emacs editor to open within the terminal rather than attempting to open it as a GUI application.\nThen, we change the meaning of the R command to automatically apply the option --no-save. This force R to discard the workspace at the end of each session instead of saving it to a file.\nalias emacs='emacs -nw' alias R='R --no-save'  The following chunk of code controls the default permissions that are set on any file or directory that you create on the CCB cluster. The value of 002 sets the permissions to:\n read, write, and execute for you and your user group read and write for every other user  ðŸ‘‰  The home directory and project directories that you are given access to have strict permissions. As such, other users do not have access to your home directory: they cannot see the list of files in your home directory nor their contents.   umask 002  The following chunk of code uses the module command to put a version of the git program on the PATH that is more recent than the version originally installed with the operating system.\nmodule load git/2.31.1  "}).add({id:16,href:"/Help/docs/bash/commands/",title:"Built-in Bash commands",description:"A cheatsheet of built-in Bash commands.",content:"Motivation # Once logged into the CCB cluster, commands typed in a Terminal application are run in a Bash environment.\nBash is the shell, or command language interpreter, for the GNU operating system. The Bash interpreter includes a number of built-in commands that allow users to navigate and manage directories and files on the CCB cluster.\nIn this page, we provide a cheatsheet of the most commonly used commands along with a brief description of their purpose and advice on best practices.\npwd # The working directory is the directory relative to which commands typed in a Terminal are executed.\nThe pwd command prints the current working directory.\npwd  When you log into the CCB cluster, the working directory is initially set to the user\u0026rsquo;s home directory.\nls # Listing the contents of directories is essential to identify files that are available for use, as well as directories that can be navigated into.\nThe ls command prints the list of files in a given directory.\nAlone, the ls command prints the list of files in the working directory.\nls  Given the path to an existing directory, the ls command prints the list of files in that particular directory.\nðŸ‘‰  The directory path can be absolute or relative to the working directory.   ls / # absolute path (starts with '/') ls ~/.ssh # relative path (does not start with '/')  The ls command also accepts a number of options. Most commonly, the -l option is used to display detailed information about each file, including permissions, file size, and the timestamp of the latest update to each file.\nls -l  Often, the -h option is added to display file sizes in human-readable format, adding units (e.g., K - kilobyte, M - megabyte, G - gigabyte). Multiple options can be combined under the same - symbol. The two forms below are equivalent.\nls -lh ls -l -h  The -t option can be used in combination with the -l option to sort files by modification time (newest first).\nls -lt  The -a option can be used to reveal and include hidden files and directories.\nðŸ‘‰  Hidden files and directories have a name that start with the '.' symbol, e.g. '.ssh'.   ls -a  Finally \u0026ndash; to clarify \u0026ndash; options and paths can be combined, to list the contents of a particular directory with specific options.\nls -lh ~/.ssh  cd # Changing the working directory is often essential to run commands in the appropriate working directory.\nAlone, the cd command changes the working directory to the user\u0026rsquo;s home directory.\ncd  Given the path to an existing directory, the cd command changes the working directory to that directory.\nðŸ‘‰  The directory path can be absolute or relative to the current working directory.   cd / # absolute path (starts with '/') cd ~/.ssh # relative path (does not start with '/')  ðŸ‘‰  Use the 'ls' command to identify existing directories that you give to the 'cd' command.   The .. shorthand refers to the parent directory of each directory on the system. This can be used to move out of a directory. The shorthand can be combined multiple times in the same path to move out multiple levels at once. Some examples are given below.\ncd .. cd ../.. cd ../../another_directory  "}).add({id:17,href:"/Help/docs/bash/environment-variables/",title:"Bash environment variables",description:"Bash environment variables.",content:"Motivation # Once logged into the CCB cluster, a number of environment variables are set in the Bash session.\nSome environment variables are identical for all users on the cluster, other are derived from the username, and users can also set environment variables themselves. Many programs require certain environment variables to be set for their good functioning.\nIn this page, we describe some of the built-in environment variables, with a brief description of their purpose and advice on best practices.\n$HOME # The $HOME environment variable is set for each user to their own home directory.\nðŸ‘‰  The '~' symbol is equivalent to the '$HOME' environment variable.   The echo command can be used to display the value of $HOME.\necho $HOME  The $HOME environment variable can also be used in commands. For instance, users can list the contents of their home directory as follows.\nls $HOME  $USER # The $USER environment variable is set for each user to their own username.\nThe echo command can be used to display the value of $USER.\necho $USER  For instance, users can query the status of their own job submitted to the queue manager as follows.\nsqueue -u $USER  "}).add({id:18,href:"/Help/docs/slurm/general-information/",title:"Slurm | General information",description:"General information about the SLURM workload management system.",content:"Introduction # The CCB cluster is a high-performance computing system shared by many users who run programs using a pool of computational resources to process data simultaneously.\nHowever, the resources that may be used at any point in time are limited by the total amount of resources available on the CCB cluster.\nTo ensure fair access to all users, the CCB cluster uses the Slurm workload manager. Users are required to submit their work as job scripts that describe the commands they wish to execute, and the amount of resources that they wish to grant to those commands during their execution. In turn, Slurm controls the execution of submitted jobs when sufficient resources are available, and manages a queue of pending work while waiting for sufficient resources to become available.\nResources # The table below summarises the types of compute nodes available.\n    Nodes Cores (per node) RAM (per node)     Large nodes 1 40 900GB   Batch nodes 20 24 240GB    ðŸ‘‰  In addition, the cluster contains 4 x NVIDIA Titan RTX cards for parallel and multi-core tasks such as deep learning.   The full list of compute nodes and associated information can be obtained as follows.\nsinfo --Node --long    Example output of the `sinfo --Node --long` command.\nMore information about individual compute nodes can be obtained using commands detailed in the page Slurm commands.\nLinks #  SLURM Documentation Quick Start User Guide WIMM CCB Computing Infrastructure  "}).add({id:19,href:"/Help/docs/slurm/commands/",title:"Slurm commands",description:"A cheatsheet of Slurm commands.",content:"Motivation # Once logged into the CCB cluster, a number of Slurm commands can be used to query resources available and the current workload.\nIn this page, we provide a cheatsheet of the most commonly used commands along with a brief description of their purpose and advice on best practices.\nPartitions # Summary information about partitions (i.e., job queues) can be accessed as follows.\nsinfo    Example output for the `sinfo` command.\nThe sinfo command displays the name of partitions and additional information in a customisable list of fields. The full list of fields and their description can be found in the Slurm documentation â†’.\nIn particular:\n The asterisk symbol * indicates the default partition, to which jobs are submitted when users don\u0026rsquo;t request a specific queue. The field AVAIL set to the value up indicates partitions that are accepting new jobs. The field TIMELIMIT indicates the maximum time limit allowed for jobs submitted to each partition (in the format hours:minutes:seconds). The value infinite is used to identify partitions without a job time limit. The field NODES indicates the number of nodes with each particular configuration in each partition. The field STATE indicates the state of nodes in each partition; for instance:  The value alloc indicates nodes allocated to one or more jobs. The value idle indicates nodes that are not allocated to any job. The value mixed indicates nodes where some CPUs are allocated a job while others are idle. The value drain indicates nodes that are currently executing jobs, but do not accept new jobs, per administrator request (e.g., for maintenance).    Nodes # The full list of individual nodes and associated information can be obtained as follows.\nsinfo --Node --long    Example output of the `sinfo --Node --long` command.\nIn particular:\n The --Node option reports a separate line for each node in each partition (a node can be shared by multiple partitions). The --long option reports more detailed information.  More detailed information about the configuration of each individual nodes can be obtained as follows.\nscontrol show node  The full list of nodes above may be excessive. Information about a particular node can be obtained as follows.\nscontrol show node \u0026lt;nodename\u0026gt;  Replace \u0026lt;nodename\u0026gt; by the name of the particular node.\n"}).add({id:20,href:"/Help/docs/conda/general-information.md/",title:"Conda | General information",description:"General information about the Conda package management system.",content:"Introduction # The CCB cluster provides many bioinformatics software packages through the [Environment Modules][modules-readthedocs] system, managed by system administrators.\nWhen software is not available through the module system, users may use the Conda package management system to install software packages themselves and organise distinct environments that may contain different version of those software package for different projects.\nAdditionally, when installing a package, Conda identifies and resolves package dependencies, installing the latest appropriate version of every dependency for the target package.\nIn this section, we provide guidance to install and setup the Conda package management system for an individual user on the CCB cluster, we demonstrate how to install packages and create distinct environments, and how to activate environments before using the newly installed software packages on the command line.\nLinks #  Conda documentation website Conda documentation Miniconda documentation  "}).add({id:21,href:"/Help/docs/conda/installation/",title:"Installation",description:"Installing the Conda package management system.",content:"Source # This page follows is based on the Installation â†’ page of the Conda documentation.\nSpecifically, scroll down to the Regular installation â†’ section, and follow the link for the Linux operating system.\n  Link to instructions for a regular installation on Linux.\nDownload the installer # In the page that you navigated to at the end of the previous section, follow the link to the Miniconda installer for Linux.\n  Link to the Miniconda installer for Linux.\nIn the table listing various Linux installers, right-click on the link to Miniconda3 Linux 64-bit associated with the most recent version of Python in the table, and click on Copy Link Address (Safari) in the contextual menu, or equivalent option for your specific web browser.\n  Link to the Miniconda installer for Linux.\nLog into the CCB cluster over SSH.\nFor a tidy installation process, we recommend creating and working in a temporary directory for the duration of the process. In you home directory create a directory called conda, change working directory to that directory, and download the Conda installer in that new directory using the link that you copied to your clipboard above.\nmkdir ~/conda cd ~/conda wget \u0026lt;url_in_clipboard\u0026gt;  Instead of \u0026lt;url_in_clipboard\u0026gt;, paste the link address to the installer that you copied into your clipboard above.\nVerify the installer hash # While optional, we recommend to verify the integrity of the installer that you have just downloaded, to ensure that the file was not corrupted during the download process.\nIn your Terminal application, type the sha256sum command followed by the name of the installer file that you just downloaded.\nFor instance:\nsha256sum \u0026lt;filename\u0026gt;  Replace \u0026lt;filename\u0026gt; by the name of the installer file that you just downloaded.\n  Example output of the `sha256sum` command.\nCompare the output of the command with the value of the field SHA256 hash in the table of download links, and make sure that it matches the two values are exactly identical.\nðŸ’¡  A quick way is to copy the hash value printed buy the 'sha256sum' command and paste it in the search field of your web browser on the page of Conda documentation. If the values match, the value next to the file that you downloaded will be highlighted.     Compare the output of the `sha256sum` command to the hash of the original file.\nRun the installer # bash \u0026lt;filename\u0026gt;  Replace \u0026lt;filename\u0026gt; by the name of the installer file that you just downloaded.\nWhen prompted, press ENTER (i.e., the Return key) to continue the installation process.\n  Running the Miniconda installer.\nReview the End User License Agreement (press the Space bar to scroll down), and when prompted, type yes to accept the license terms.\nWhen prompted, press ENTER to confirm your home directory as the location where Miniconda will be installed.\n  Setting the installation directory for Miniconda.\nWhen prompted, type yes to allow the installer to run conda init.\nðŸ‘‰  This last action automatically edits your '~/.bashrc' file.     Allowing the Miniconda installer to run 'conda init'.\nEdit your .bashrc file # At the end of the previous section, we allowed the Miniconda installer to automatically add some contents to your ~/.bashrc file. Those contents ensure that Conda is initialised every time you log into the CCB cluster over SSH.\n  Automatically generated contents added to the '~/.bashrc' file.\nHowever, those contents are initially added at the very end of the file, outside the block of code controlled by the statement if [[ $PS1 ]]; then (see section The .bashrc file). This is an issue on the CCB cluster, as the ~/.bashrc file is also executed in the non-interactive Bash sessions launched for each job submitted to the Slurm workload management system, which may cause issues during the execution of jobs.\nTo make sure that Conda is only initialised in interactive Bash sessions, you need to move those contents inside the block of code controlled by the statement if [[ $PS1 ]]; then. For clarity and readability, it is also recommend to indent those contents by four white spaces after they are moved.\nConceptually:\nif [[ $PS1 ]]; then ## \u0026lt;other contents\u0026gt; # \u0026gt;\u0026gt;\u0026gt; conda initialize \u0026gt;\u0026gt;\u0026gt; # !! Contents within this block are managed by 'conda init' !! __conda_setup=\u0026quot;$('/home/a/\u0026lt;username\u0026gt;/miniconda3/bin/conda' 'shell.bash' 'hook' 2\u0026gt; /dev/null)\u0026quot; if [ $? -eq 0 ]; then eval \u0026quot;$__conda_setup\u0026quot; else if [ -f \u0026quot;/home/a/\u0026lt;username\u0026gt;/miniconda3/etc/profile.d/conda.sh\u0026quot; ]; then . \u0026quot;/home/a/\u0026lt;username\u0026gt;/miniconda3/etc/profile.d/conda.sh\u0026quot; else export PATH=\u0026quot;/home/a/\u0026lt;username\u0026gt;/miniconda3/bin:$PATH\u0026quot; fi fi unset __conda_setup # \u0026lt;\u0026lt;\u0026lt; conda initialize \u0026lt;\u0026lt;\u0026lt; fi # if PS1  Note that in the example above, \u0026lt;username\u0026gt; represents your own username, and ## \u0026lt;other contents\u0026gt; represents other contents in that section of your own ~/.bashrc file.\nðŸ‘‰  Do not copy from the example above. Instead, adjust the contents that were automatically generated in your own '~/.bashrc' file.   Lastly, add the following lines between the closing \u0026lt;\u0026lt;\u0026lt; conda initialize \u0026lt;\u0026lt;\u0026lt; line and the final fi # if PS1 line.\n## fix to get conda to pick up environments properly https://github.com/conda/conda/issues/9392 conda deactivate conda activate base  As the comment indicates, those lines address a known issue, making sure that the base Conda environment is activated in a way that all Conda environments are detected properly.\nThe screenshot below exemplifies the expected appearance of the final lines of the ~/.bashrc file after applying the edits described in this section.\n  View of the final lines of the edited '.bashrc' file.\nTest your installation # To make the changes take effect, close the Terminal application, open a new Terminal application and log into the CCB cluster again.\nFirst of all, you should immediately see the additional prefix (base) at the start of your Bash prompt as soon as you log into the CCB cluster, indicating that the Conda base environment was activated successfully.\n  The Conda 'base' environment is automatically activated.\nYou may also run the command conda list, which should return a list of the packages installed in the base environment.\nconda list    View of the first lines of output for the 'conda list' command.\nYou have now a working installation of the Conda package management system!\n"}).add({id:22,href:"/Help/docs/pipelines/drmaa/",title:"The DRMAA API",description:"Setting up the DRMAA API.",content:"Motivation # The Distributed Resource Management Application API (DRMAA) â†’ is used by workflow managers such as cgatcore â†’ to communicate with HPC queue managers while submitting and monitoring jobs.\nThe drmaa package provides a Python interface to the DRMAA library.\nThis page describes the setup necessary for using DRMAA on the CCB cluster. This setup is a prerequisite for using cgatcore â†’ pipelines.\nSetup # On the CCB cluster, in your ~/.bashrc file, add the following chunk of code to set the environment variable DRMAA_LIBRARY_PATH.\nðŸ‘‰  If your '.bashrc' file already contains the conditional statement 'if [[ $PS1 ]]', you can add only the 'export' statement within the existing bloc of code.   if [[ $PS1 ]]; then export DRMAA_LIBRARY_PATH=/usr/lib64/libdrmaa.so fi  You are now ready to use the DRMAA library in cgatcore â†’ pipelines.\n"}).add({id:23,href:"/Help/docs/pipelines/cgatcore.md/",title:"The cgatcore library",description:"Using cgatcore pipelines.",content:"Motivation # CGAT-core is a workflow management system that allows users to build data analysis pipelines.\nThe cgatcore python package provides a set of libraries and helper functions that enable researchers to design and build computational workflows for large-scale data analysis workflows.\nIn-depth documentation about cgatcore is available on ReadTheDocs â†’.\nIn this page, we provide advice for setting up the cgatcore workflow management system on the WIMM CCB cluster.\nSetup # On the CCB cluster, create the file ~/.cgat.yml and add the following lines in it.\ncluster: queue_manager: slurm queue: batch tmpdir: /tmp  First, the section cluster defines the program acting as queue manager and the name of the queue to which jobs will be submitted using the DRMAA library.\nThe field tmpdir defines the temporary directory used by cgatcore for writing temporary files during the execution of workflows.\n"}).add({id:24,href:"/Help/docs/help/contact/",title:"Contact",description:"Contacts for getting help.",content:"Email # For issues with the MRC WIMM CCB HPC cluster, email genmail@molbiol.ox.ac.uk to open a ticket that will be tracked by the system administrators.\nGitHub # For issues with this documentation, open a GitHub issue â†’.\n"}).add({id:25,href:"/Help/docs/help/links/",title:"Links",description:"Links to external resources for further reading are gathered here.",content:"University of Oxford #  MRC Weatherall Institute of Molecular Medicine MRC WIMM Centre for Computational Biology IT Help  "}).add({id:26,href:"/Help/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()