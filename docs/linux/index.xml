<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux command line on</title><link>https://obds-training.github.io/Help/docs/linux/</link><description>Recent content in Linux command line on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:49:15 +0000</lastBuildDate><atom:link href="https://obds-training.github.io/Help/docs/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to Linux and Bash</title><link>https://obds-training.github.io/Help/docs/linux/introduction/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://obds-training.github.io/Help/docs/linux/introduction/</guid><description>What is Linux? # Linux is an operating system (OS), like Microsoft Windows (MS Windows) and macOS.
However, Linux is open source and free of cost.
Linux and macOS are different, but share a large number of commands as macOS is based on BSD (Berkeley Standard Distribution) which is similar to Linux but not Linux.
More technical differences include:
File names are case-sensitive in Linux (and macOS) while they are not in MS Windows.</description></item><item><title>Autocompletion</title><link>https://obds-training.github.io/Help/docs/linux/autocompletion/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://obds-training.github.io/Help/docs/linux/autocompletion/</guid><description>What is autocompletion? # Autocompletion refer to the action of pressing the tabulation key after typing the first few characters of a command name or filepath, allowing the Terminal application to predict the rest of the word.
If the prediction unambiguously identifies a single match, the remaining characters are automatically inserted to complete the word. The user can then continue typing the rest of the command or filepath.
If the prediction identifies multiple matches, no autocompletion will take place.</description></item><item><title>Keyboard shortcuts</title><link>https://obds-training.github.io/Help/docs/linux/keyboard-shortcuts/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://obds-training.github.io/Help/docs/linux/keyboard-shortcuts/</guid><description>Navigate the history of commands # The up and down arrow keys can be used to navigate the history of commands used earlier in a Terminal session (or in an earlier Terminal session altogether).
ðŸ‘‰ The left and right arrow keys have an entirely unrelated functionality; they navigate one character left or right within the command currently being typed at the prompt. Jump to the start/end of a line # The Control and A keys can be pressed simultaneously to move the cursor instantly at the start of the current line.</description></item><item><title>Essential Bash commands</title><link>https://obds-training.github.io/Help/docs/linux/commands/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://obds-training.github.io/Help/docs/linux/commands/</guid><description>Overview # This page introduces commands that are completely safe and purely display information that may be used by users to get help or explore the environment of the CCB cluster
man # The man &amp;lt;page&amp;gt; command can be used to print the reference manual page &amp;lt;page&amp;gt;.
For instance, the reference manual page for the command pwd can be displayed as follows:
man pwd ðŸ‘‰ The manual page is open in an interactive viewer in the Terminal application.</description></item><item><title>Navigate directories and files</title><link>https://obds-training.github.io/Help/docs/linux/files-navigate/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://obds-training.github.io/Help/docs/linux/files-navigate/</guid><description>Print working directory # The working directory is the directory where the Bash session is currently located, and relative to which commands typed in a Terminal are executed.
The pwd command prints the current working directory.
pwd When you log into the CCB cluster, the working directory is initially set to the user&amp;rsquo;s home directory.
ðŸ‘‰ The 'pwd' command is entirely harmless. Do not hesitate to experiment and get comfortable with it!</description></item><item><title>Files and permissions</title><link>https://obds-training.github.io/Help/docs/linux/files-and-permissions/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://obds-training.github.io/Help/docs/linux/files-and-permissions/</guid><description>Example scenario # In this page, examples refer to the layout of files and directories illustrated in the schematic below.
Absolute and relative paths # Absolute file paths start from the &amp;lsquo;root&amp;rsquo; directory, represented by the / symbol.
For instance, in the example scenario illustrated above, the following file and directory paths are valid:
/ /bin /bin/bash /usr/local /usr/local/bin Relative file paths describe paths relative to the working directory.</description></item><item><title>Viewing and editing files</title><link>https://obds-training.github.io/Help/docs/linux/files-view-edit/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://obds-training.github.io/Help/docs/linux/files-view-edit/</guid><description>Display the contents of a file # Full contents # The cat &amp;lt;file&amp;gt; command can be used to display the entire contents of a file in the Terminal application.
For instance:
cat file2.csv ðŸ‘‰ While the 'cat' command is entirely harmless, it is highly inefficient for very large files and may freeze the Terminal application. If that happens, you may interrupt the command using the 'Control' and 'C' keyboard shortcut.</description></item><item><title>Manage files and directories</title><link>https://obds-training.github.io/Help/docs/linux/files-manage/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://obds-training.github.io/Help/docs/linux/files-manage/</guid><description>Creating empty files # The touch &amp;lt;file&amp;gt; command can be used to create new empty files.
Multiple files can be created in a single command.
For instance:
touch a.txt b.csv ðŸ‘‰ In the screenshot above, the zeroes highlighted in red indicate that the new files are empty (i.e., size of 0 bytes). If a file already exists, the touch command does not edit the contents of the file, but update the timestamp of the latest edit to the current date-time.</description></item><item><title>Bash environment variables</title><link>https://obds-training.github.io/Help/docs/linux/environment-variables/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://obds-training.github.io/Help/docs/linux/environment-variables/</guid><description>Motivation # Once logged into the CCB cluster, a number of environment variables are set in the Bash session.
Some environment variables are identical for all users on the cluster, other are derived from the username, and users can also set environment variables themselves. Many programs require certain environment variables to be set for their good functioning.
In this page, we describe some of the built-in environment variables, with a brief description of their purpose and advice on best practices.</description></item><item><title>The .bashrc file</title><link>https://obds-training.github.io/Help/docs/linux/bashrc/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://obds-training.github.io/Help/docs/linux/bashrc/</guid><description>Motivation # Every time you connect to the CCB cluster, you are given a new session in a Bash environment in your Terminal application.
In those new sessions, you may find yourself repetitively typing the same set of commands to set up the environment of that session before you are able to work.
The file ~/.bashrc is a Shell script that Bash runs whenever it is started interactively. As such, this file is often edited to include commands that users wish to execute every time they log in, without the need to explicitly type them every time.</description></item></channel></rss>